<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32F407ZET6\STM32F407ZET6.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32F407ZET6\STM32F407ZET6.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Wed Jan 22 10:59:58 2020
<BR><P>
<H3>Maximum Stack Usage =       1360 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; RemoteCommandSwitch &rArr; Internal_SD_Mem_Comm &rArr; list_all_mem_locations &rArr; read_from_file &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">SD_initialize</a> from sd_diskio.o(i.SD_initialize) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[63]">SD_ioctl</a> from sd_diskio.o(i.SD_ioctl) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[61]">SD_read</a> from sd_diskio.o(i.SD_read) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[60]">SD_status</a> from sd_diskio.o(i.SD_status) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[62]">SD_write</a> from sd_diskio.o(i.SD_write) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f4xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[5e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[5b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[1f2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[64]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[80]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1f3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1f4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1f5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1f6]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1f7]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[79]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_if_digit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_variables
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Active_Language_Comm
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMeasParameters_COMM
</UL>

<P><STRONG><a name="[1f8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1fa]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc_raw_results
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_real_adc_values
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_GPIO_Structures
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateMaxMinTimePerPhase
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DRM_ADC
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_multiple_ch_adcs
</UL>

<P><STRONG><a name="[1fc]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[161]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBuffer
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutputBuffer
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferCurrent
</UL>

<P><STRONG><a name="[bb]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterBreakerTestDataFileName_COMM
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRINT_Header
</UL>

<P><STRONG><a name="[6c]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_int
</UL>

<P><STRONG><a name="[6f]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_long
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearTransducerRes_Prikaz
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_DRM_Channel
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_adcs
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimePrikaz
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearTransducerRes_Prikaz
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_DRM_Channel
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferAnalogCH
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimePrikaz
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearTransducerRes_Prikaz
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_DRM_Channel
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferAnalogCH
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_adcs
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_adcs
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBuffer
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_adcs
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimePrikaz
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearTransducerRes_Prikaz
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalTransRes_Prikaz
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_One_ADC_CH_COMM
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferCurrent
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferAnalogCH
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearTransducerRes_Prikaz
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimePrikaz
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearTransducerRes_Prikaz
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalTransRes_Prikaz
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferAnalogCH
</UL>

<P><STRONG><a name="[1fd]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1fe]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ff]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[200]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[201]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[71]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[65]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[202]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[203]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[81]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[204]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>ADC_Read_MainContacts</STRONG> (Thumb, 1564 bytes, Stack size 104 bytes, adc.o(i.ADC_Read_MainContacts))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ADC_Read_MainContacts &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_adcs
</UL>

<P><STRONG><a name="[84]"></a>AUX_DryWetControl_Command</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, control.o(i.AUX_DryWetControl_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AUX_DryWetControl_Command &rArr; AUX_dry_wet_control &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OK_Response
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUX_dry_wet_control
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[85]"></a>AUX_dry_wet_control</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, bios.o(i.AUX_dry_wet_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AUX_dry_wet_control &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUX_DryWetControl_Command
</UL>

<P><STRONG><a name="[160]"></a>AddSinglePhaseResult</STRONG> (Thumb, 234 bytes, Stack size 20 bytes, control.o(i.AddSinglePhaseResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AddSinglePhaseResult
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBuffer
</UL>

<P><STRONG><a name="[88]"></a>BSGBuckControl</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bios.o(i.BSGBuckControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSGBuckControl &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainContactsInitSequence
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSG_OFF_Sequence
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGSTwoBPPF_ON_Sequence
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGSOneBPPF_ON_Sequence
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Test_Mode_COMM
</UL>

<P><STRONG><a name="[89]"></a>BSGChargeDischargeRELControl</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bios.o(i.BSGChargeDischargeRELControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSGChargeDischargeRELControl &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGTest_COMM
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osg_or_bsg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSG_OFF_Sequence
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGSTwoBPPF_ON_Sequence
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGSOneBPPF_ON_Sequence
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Test_Mode_COMM
</UL>

<P><STRONG><a name="[8a]"></a>BSGConfigON</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bios.o(i.BSGConfigON))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSGConfigON &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGSTwoBPPF_ON_Sequence
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGSOneBPPF_ON_Sequence
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Test_Mode_COMM
</UL>

<P><STRONG><a name="[8b]"></a>BSGRelayControl</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bios.o(i.BSGRelayControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSGRelayControl &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainContactsInitSequence
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSG_OFF_Sequence
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGSTwoBPPF_ON_Sequence
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGSOneBPPF_ON_Sequence
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Test_Mode_COMM
</UL>

<P><STRONG><a name="[8c]"></a>BSGSOneBPPF_ON_Sequence</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, bios.o(i.BSGSOneBPPF_ON_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BSGSOneBPPF_ON_Sequence &rArr; BSGRelayControl &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGRelayControl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGConfigON
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGChargeDischargeRELControl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGBuckControl
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osg_or_bsg
</UL>

<P><STRONG><a name="[8e]"></a>BSGSTwoBPPF_ON_Sequence</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, bios.o(i.BSGSTwoBPPF_ON_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BSGSTwoBPPF_ON_Sequence &rArr; BSGRelayControl &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGRelayControl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGConfigON
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGChargeDischargeRELControl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGBuckControl
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osg_or_bsg
</UL>

<P><STRONG><a name="[8f]"></a>BSGTest_COMM</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, control.o(i.BSGTest_COMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSGTest_COMM &rArr; BSGChargeDischargeRELControl &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OK_Response
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGChargeDischargeRELControl
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[90]"></a>BSG_OFF_Sequence</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, bios.o(i.BSG_OFF_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BSG_OFF_Sequence &rArr; OSGConfigON &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSGConfigON
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGRelayControl
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGChargeDischargeRELControl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGBuckControl
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Test_Mode_COMM
</UL>

<P><STRONG><a name="[92]"></a>BSP_SD_GetCardInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_driver_sd.o(i.BSP_SD_GetCardInfo))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ioctl
</UL>

<P><STRONG><a name="[94]"></a>BSP_SD_GetCardState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>

<P><STRONG><a name="[96]"></a>BSP_SD_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[98]"></a>BSP_SD_ReadBlocks</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bsp_driver_sd.o(i.BSP_SD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_SD_ReadBlocks &rArr; HAL_SD_ReadBlocks &rArr; SDMMC_CmdStopTransfer &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[9a]"></a>BSP_SD_WriteBlocks</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bsp_driver_sd.o(i.BSP_SD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_SD_WriteBlocks &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
</UL>

<P><STRONG><a name="[9c]"></a>Battery_Charger_Control</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, control.o(i.Battery_Charger_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Battery_Charger_Control &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>CC_RelayControl</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bios.o(i.CC_RelayControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CC_RelayControl &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_coil_control
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_IGBT_Control
</UL>

<P><STRONG><a name="[9f]"></a>CKD</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usb_flash_drive.o(i.CKD))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CKD &rArr; VNrs &rArr; ReadSPIs &rArr; spie_master_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrvn
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNrs
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVNC1L
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenVfile
</UL>

<P><STRONG><a name="[a3]"></a>CalculateMaxMinTimePerPhase</STRONG> (Thumb, 346 bytes, Stack size 104 bytes, control.o(i.CalculateMaxMinTimePerPhase))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CalculateMaxMinTimePerPhase &rArr; calc_min_time
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_min_time
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_max_time
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBuffer
</UL>

<P><STRONG><a name="[a7]"></a>CheckBreakerStatus_COMM</STRONG> (Thumb, 514 bytes, Stack size 16 bytes, control.o(i.CheckBreakerStatus_COMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CheckBreakerStatus_COMM &rArr; read_all_adcs &rArr; ADC_Read_MainContacts &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_adcs
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OPEN_LED_control
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CLOSE_LED_control
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[c2]"></a>ClearInputBuff</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, comm.o(i.ClearInputBuff))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputBuffer
</UL>

<P><STRONG><a name="[157]"></a>ClearPrintBuffer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, control.o(i.ClearPrintBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewLine
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinterParamters
</UL>

<P><STRONG><a name="[ab]"></a>CloseFile</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usb_flash_drive.o(i.CloseFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CloseFile &rArr; VNrs &rArr; ReadSPIs &rArr; spie_master_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrvn
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNrs
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVNC1L
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseVfile
</UL>

<P><STRONG><a name="[ac]"></a>CloseVfile</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_flash_drive.o(i.CloseVfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CloseVfile &rArr; CloseFile &rArr; VNrs &rArr; ReadSPIs &rArr; spie_master_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFile
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStick_Comm
</UL>

<P><STRONG><a name="[ad]"></a>DRM1_ADC_Read_All</STRONG> (Thumb, 542 bytes, Stack size 136 bytes, adc.o(i.DRM1_ADC_Read_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DRM1_ADC_Read_All
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_DRM_Channel
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DRM_ADC
</UL>

<P><STRONG><a name="[b0]"></a>DRM_Channel_Disable</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bios.o(i.DRM_Channel_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DRM_Channel_Disable &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_DRM_Channel
</UL>

<P><STRONG><a name="[b1]"></a>DRM_Channel_Enable</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, bios.o(i.DRM_Channel_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DRM_Channel_Enable &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_DRM_Channel
</UL>

<P><STRONG><a name="[b2]"></a>DRM_DAC_Write</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, bios.o(i.DRM_DAC_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DRM_DAC_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_DRM_Channel
</UL>

<P><STRONG><a name="[b4]"></a>DT_Reset_Counter_COMM</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, control.o(i.DT_Reset_Counter_COMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DT_Reset_Counter_COMM &rArr; OK_Response &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OK_Response
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigTrans_Counter_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>DeleteFile</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usb_flash_drive.o(i.DeleteFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DeleteFile &rArr; VNrs &rArr; ReadSPIs &rArr; spie_master_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrvn
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNrs
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVNC1L
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenVfile
</UL>

<P><STRONG><a name="[b5]"></a>DigTrans_Counter_Reset</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, adc.o(i.DigTrans_Counter_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DT_Reset_Counter_COMM
</UL>

<P><STRONG><a name="[b7]"></a>DigitalTransRes_Prikaz</STRONG> (Thumb, 640 bytes, Stack size 72 bytes, control.o(i.DigitalTransRes_Prikaz))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DigitalTransRes_Prikaz &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferMotion
</UL>

<P><STRONG><a name="[b9]"></a>DisplayText</STRONG> (Thumb, 822 bytes, Stack size 40 bytes, control.o(i.DisplayText))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DisplayText &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBuffer
</UL>

<P><STRONG><a name="[ba]"></a>EnterBreakerTestDataFileName_COMM</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, control.o(i.EnterBreakerTestDataFileName_COMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EnterBreakerTestDataFileName_COMM &rArr; OK_Response &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OK_Response
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[bc]"></a>EnterTFUnits_COMM</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, control.o(i.EnterTFUnits_COMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterTFUnits_COMM &rArr; OK_Response &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OK_Response
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[bd]"></a>EnterTimeDate_COMM</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, control.o(i.EnterTimeDate_COMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EnterTimeDate_COMM &rArr; string_to_int &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OK_Response
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_int
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_if_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[12d]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FSMC_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_UART_Init_printer_comm
</UL>

<P><STRONG><a name="[12b]"></a>FATFS_LinkDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
</UL>

<P><STRONG><a name="[206]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, ff_gen_drv.o(i.FATFS_LinkDriverEx), UNUSED)

<P><STRONG><a name="[f8]"></a>FSMC_NORSRAM_Extended_Timing_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Extended_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[f6]"></a>FSMC_NORSRAM_Init</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FSMC_NORSRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[f7]"></a>FSMC_NORSRAM_Timing_Init</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSMC_NORSRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[c0]"></a>FindFile</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usb_flash_drive.o(i.FindFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FindFile &rArr; VNrs &rArr; ReadSPIs &rArr; spie_master_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrvn
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNrs
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVNC1L
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenVfile
</UL>

<P><STRONG><a name="[c1]"></a>GetInputBuffer</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, comm.o(i.GetInputBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GetInputBuffer &rArr; getcharB &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_getchar
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcharB
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearInputBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>Get_Active_Calibration_Coef_COMM</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, calib.o(i.Get_Active_Calibration_Coef_COMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Get_Active_Calibration_Coef_COMM &rArr; SendOutputBuffer &rArr; putcharB &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OK_Response
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutputBuffer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[c7]"></a>Get_Measurement_Data_Comm</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, control.o(i.Get_Measurement_Data_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Get_Measurement_Data_Comm &rArr; string_to_int &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_int
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_if_digit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_char_from_pc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_measuring_samples_to_pc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_transfer_over_status
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc_res_sram_test
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[cc]"></a>Get_RMO_Results_Comm</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, control.o(i.Get_RMO_Results_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Get_RMO_Results_Comm &rArr; putcharB &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putcharB
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[ce]"></a>Get_Test_Settings_Comm</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, control.o(i.Get_Test_Settings_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Get_Test_Settings_Comm &rArr; send_test_data_to_pc &rArr; SendOutputBuffer &rArr; putcharB &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test_data_to_pc
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[8d]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewLine
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSG_OFF_Sequence
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGSTwoBPPF_ON_Sequence
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGSOneBPPF_ON_Sequence
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_flash_drive_MCU
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_DRM_Channel
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Test_Mode_COMM
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DRM_ADC
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADC_Res_COMM
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_select_usb_flash_drive
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_deselect_usb_flash_drive
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNrs
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDir
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenVfile
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFileW
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile3
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFile
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProgressBar
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dummy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinterParamters
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_multiple_ch_adcs
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[83]"></a>HAL_GPIO_Init</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FSMC_MspInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_GPIO_Structures
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_GPIOB_Structure
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAuxillaryChannels
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Read_MainContacts
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putcharB
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcharB
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DRM_ADC
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_multiple_ch_adcs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_digital_trans_chs
</UL>

<P><STRONG><a name="[af]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRM1_ADC_Read_All
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_for_stop_button
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spie_master_tx_rx
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spie_master_tx_fast
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putcharB
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcharB
</UL>

<P><STRONG><a name="[19c]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toggle_Pins
</UL>

<P><STRONG><a name="[ae]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_coil_control
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRM1_ADC_Read_All
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_open_coil
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_close_coil
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spie_master_tx_rx
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spie_master_tx_fast
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putcharB
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcharB
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRM_DAC_Write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRM_Channel_Enable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRM_Channel_Disable
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_flash_drive_MCU
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_IGBT_Control
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_select_usb_flash_drive
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_deselect_usb_flash_drive
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_multiple_ch_adcs
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_adc_channels_test
</UL>

<P><STRONG><a name="[d0]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[d2]"></a>HAL_I2C_Init</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[87]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Charger_Control
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_coil_control
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bat_control
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_printer_communication
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_printer_communication
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAnalogCHRange
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSGConfigON
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OPEN_LED_control
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CLOSE_LED_control
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RelayControl
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGRelayControl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGConfigON
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGChargeDischargeRELControl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGBuckControl
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUX_dry_wet_control
</UL>

<P><STRONG><a name="[d3]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[19a]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d9]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[dc]"></a>HAL_MspInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[fc]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[de]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[da]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[e0]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d4]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[19d]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[e1]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[e2]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 770 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[196]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 474 bytes, Stack size 20 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[93]"></a>HAL_SD_GetCardInfo</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_GetCardInfo))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>

<P><STRONG><a name="[95]"></a>HAL_SD_GetCardState</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>

<P><STRONG><a name="[97]"></a>HAL_SD_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[e6]"></a>HAL_SD_InitCard</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_PowerState_ON
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[e5]"></a>HAL_SD_MspInit</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, stm32f4xx_hal_msp.o(i.HAL_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[99]"></a>HAL_SD_ReadBlocks</STRONG> (Thumb, 434 bytes, Stack size 64 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SD_ReadBlocks &rArr; SDMMC_CmdStopTransfer &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
</UL>

<P><STRONG><a name="[9b]"></a>HAL_SD_WriteBlocks</STRONG> (Thumb, 410 bytes, Stack size 64 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteFIFO
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks
</UL>

<P><STRONG><a name="[f4]"></a>HAL_SRAM_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_sram.o(i.HAL_SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SRAM_Init &rArr; HAL_SRAM_MspInit &rArr; HAL_FSMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Timing_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FSMC_Init
</UL>

<P><STRONG><a name="[f5]"></a>HAL_SRAM_MspInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hal_msp.o(i.HAL_SRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SRAM_MspInit &rArr; HAL_FSMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FSMC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[148]"></a>HAL_SRAM_Read_16b</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f4xx_hal_sram.o(i.HAL_SRAM_Read_16b))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_SRAM_Read_16b
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryTest_Comm
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryReadByte_Comm
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DRM_ADC
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc_raw_results
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc_res_sram_test
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_SRAM_Read_8b</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f4xx_hal_sram.o(i.HAL_SRAM_Read_8b))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_SRAM_Read_8b
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc_raw_results
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc_res_sram_test
</UL>

<P><STRONG><a name="[14a]"></a>HAL_SRAM_Write_16b</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f4xx_hal_sram.o(i.HAL_SRAM_Write_16b))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_SRAM_Write_16b
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryWriteByte_Comm
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryTest_Comm
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DRM_ADC
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_adc_channels_test
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_SRAM_Write_8b</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f4xx_hal_sram.o(i.HAL_SRAM_Write_8b))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_SRAM_Write_8b
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_adc_channels_test
</UL>

<P><STRONG><a name="[dd]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[107]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[f9]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[fa]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[13b]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DRM_ADC
</UL>

<P><STRONG><a name="[140]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
</UL>

<P><STRONG><a name="[fd]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[103]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_UART_Init_printer_comm
</UL>

<P><STRONG><a name="[10b]"></a>HAL_UART_MspInit</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[10d]"></a>HAL_UART_Receive</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_getchar
</UL>

<P><STRONG><a name="[10f]"></a>HAL_UART_Transmit</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutputBuffer
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar_printer
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_putchar
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>I2C_CLOSE_LED_control</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bios.o(i.I2C_CLOSE_LED_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C_CLOSE_LED_control &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBreakerStatus_COMM
</UL>

<P><STRONG><a name="[a9]"></a>I2C_OPEN_LED_control</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bios.o(i.I2C_OPEN_LED_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C_OPEN_LED_control &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBreakerStatus_COMM
</UL>

<P><STRONG><a name="[112]"></a>InitStick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_flash_drive.o(i.InitStick))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = InitStick &rArr; OpenVfile &rArr; SetDir &rArr; VNrs &rArr; ReadSPIs &rArr; spie_master_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenVfile
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVNC1L
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStick_Comm
</UL>

<P><STRONG><a name="[115]"></a>InitStick_Comm</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, usb_flash_drive.o(i.InitStick_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = InitStick_Comm &rArr; TestWrite &rArr; LWriteToFile &rArr; SendProgressBar &rArr; SendOutputBuffer &rArr; putcharB &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spie_master_tx_rx
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_select_usb_flash_drive
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_deselect_usb_flash_drive
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestWrite
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStick
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseVfile
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[113]"></a>InitVNC1L</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usb_flash_drive.o(i.InitVNC1L))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InitVNC1L &rArr; VNrs &rArr; ReadSPIs &rArr; spie_master_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrvn
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNrs
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVNC1L
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStick
</UL>

<P><STRONG><a name="[11a]"></a>Internal_SD_Mem_Comm</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, control.o(i.Internal_SD_Mem_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = Internal_SD_Mem_Comm &rArr; list_all_mem_locations &rArr; read_from_file &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OK_Response
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_int
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_if_digit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_data_to_sd_card
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_from_sd_card
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_location_info
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_all_mem_locations
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_all_mem_locations
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_result_from_the_list
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[121]"></a>LWriteToFile</STRONG> (Thumb, 892 bytes, Stack size 112 bytes, usb_flash_drive.o(i.LWriteToFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LWriteToFile &rArr; SendProgressBar &rArr; SendOutputBuffer &rArr; putcharB &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_deselect_usb_flash_drive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrvn
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_sector
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNrs
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVNC1L_fast
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVNC1L
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProgressBar
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc_res_sram_test
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestWrite
</UL>

<P><STRONG><a name="[125]"></a>LWriteToFile2</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, usb_flash_drive.o(i.LWriteToFile2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LWriteToFile2 &rArr; VNrs &rArr; ReadSPIs &rArr; spie_master_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_deselect_usb_flash_drive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrvn
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNrs
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UcitajNumerickeRezultate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVNC1L
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestWrite
</UL>

<P><STRONG><a name="[127]"></a>LWriteToFile3</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, usb_flash_drive.o(i.LWriteToFile3))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LWriteToFile3 &rArr; VNrs &rArr; ReadSPIs &rArr; spie_master_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_deselect_usb_flash_drive
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrvn
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_sector
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNrs
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVNC1L
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestWrite
</UL>

<P><STRONG><a name="[128]"></a>LinearTransducerRes_Prikaz</STRONG> (Thumb, 770 bytes, Stack size 80 bytes, control.o(i.LinearTransducerRes_Prikaz))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LinearTransducerRes_Prikaz &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferMotion
</UL>

<P><STRONG><a name="[12a]"></a>MX_FATFS_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fatfs.o(i.MX_FATFS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_FATFS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>MX_FSMC_Init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, init.o(i.MX_FSMC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_FSMC_Init &rArr; HAL_SRAM_Init &rArr; HAL_SRAM_MspInit &rArr; HAL_FSMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>MX_GPIO_Init</STRONG> (Thumb, 428 bytes, Stack size 56 bytes, init.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>MX_I2C1_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, init.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e2]"></a>MX_SDIO_SD_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, init.o(i.MX_SDIO_SD_Init))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>MX_TIM2_Init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, init.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, init.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResults_Comm
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>MainContactsInitSequence</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bios.o(i.MainContactsInitSequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MainContactsInitSequence &rArr; OSGConfigON &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSGConfigON
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGRelayControl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGBuckControl
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>MeasurementStart_Comm</STRONG> (Thumb, 584 bytes, Stack size 32 bytes, control.o(i.MeasurementStart_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = MeasurementStart_Comm &rArr; process_data_for_OCO_test &rArr; check_mc_test_results &rArr; read_adc_res_sram_test &rArr; HAL_SRAM_Read_16b
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutputBuffer
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_offset_for_CC_channels
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_GPIO_Structures
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_GPIOB_Structure
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigTrans_Counter_Reset
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osg_or_bsg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_opening_test
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_closing_test
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_OC_test
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_OCO_test
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_CO_test
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_open_coil
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_close_coil
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coil_control
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosaljiMSodgovor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAnalogCHRange
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSG_OFF_Sequence
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUX_dry_wet_control
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_adc_channels_test
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[146]"></a>MemoryReadByte_Comm</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, control.o(i.MemoryReadByte_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MemoryReadByte_Comm &rArr; string_to_long &rArr; atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Read_16b
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_long
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_if_digit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[149]"></a>MemoryTest_Comm</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, control.o(i.MemoryTest_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MemoryTest_Comm &rArr; SendOutputBuffer &rArr; putcharB &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutputBuffer
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Write_16b
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Read_16b
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[14b]"></a>MemoryWriteByte_Comm</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, control.o(i.MemoryWriteByte_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MemoryWriteByte_Comm &rArr; string_to_long &rArr; atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OK_Response
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutputBuffer
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Write_16b
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_long
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_int
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_if_digit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>OK_Response</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, control.o(i.OK_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OK_Response &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryWriteByte_Comm
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Internal_SD_Mem_Comm
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Active_Calibration_Coef_COMM
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterTimeDate_COMM
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterTFUnits_COMM
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterBreakerTestDataFileName_COMM
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DT_Reset_Counter_COMM
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGTest_COMM
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUX_DryWetControl_Command
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Calib_Coef_Comm
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Test_Mode_COMM
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RMO_Results_Comm
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Active_Language_Comm
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMeasParameters_COMM
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLTransdParameters_COMM
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_IGBT_Control
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADC_Res_COMM
</UL>

<P><STRONG><a name="[91]"></a>OSGConfigON</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bios.o(i.OSGConfigON))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OSGConfigON &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainContactsInitSequence
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osg_or_bsg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSG_OFF_Sequence
</UL>

<P><STRONG><a name="[14c]"></a>OpenFileW</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, usb_flash_drive.o(i.OpenFileW))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OpenFileW &rArr; VNrs &rArr; ReadSPIs &rArr; spie_master_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setdt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrvn
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNrs
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVNC1L
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenVfile
</UL>

<P><STRONG><a name="[114]"></a>OpenVfile</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, usb_flash_drive.o(i.OpenVfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OpenVfile &rArr; SetDir &rArr; VNrs &rArr; ReadSPIs &rArr; spie_master_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrvn
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDir
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFileW
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFile
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFile
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKD
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStick
</UL>

<P><STRONG><a name="[14f]"></a>PRINT_Header</STRONG> (Thumb, 704 bytes, Stack size 40 bytes, printer.o(i.PRINT_Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PRINT_Header &rArr; PrintEmptyLine &rArr; PrintNewLine &rArr; putchar_printer &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewLine
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar_printer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dummy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinterParamters
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintEmptyLine
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResults
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[135]"></a>PosaljiMSodgovor</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, control.o(i.PosaljiMSodgovor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PosaljiMSodgovor &rArr; my_putchar &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
</UL>

<P><STRONG><a name="[154]"></a>PrintEmptyLine</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, printer.o(i.PrintEmptyLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PrintEmptyLine &rArr; PrintNewLine &rArr; putchar_printer &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewLine
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRINT_Header
</UL>

<P><STRONG><a name="[153]"></a>PrintNewLine</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, printer.o(i.PrintNewLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PrintNewLine &rArr; putchar_printer &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_for_stop_button
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPrintBuffer
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar_printer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBuffer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResults_Comm
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferMotion
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferCurrent
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferAnalogCH
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintEmptyLine
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRINT_Header
</UL>

<P><STRONG><a name="[158]"></a>PrintResults</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, printer.o(i.PrintResults))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PrintResults &rArr; PRINT_Header &rArr; PrintEmptyLine &rArr; PrintNewLine &rArr; putchar_printer &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRINT_Header
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResults_Comm
</UL>

<P><STRONG><a name="[159]"></a>PrintResults_Comm</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, printer.o(i.PrintResults_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PrintResults_Comm &rArr; PrintResults &rArr; PRINT_Header &rArr; PrintEmptyLine &rArr; PrintNewLine &rArr; putchar_printer &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewLine
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_int
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_if_digit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar_printer
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_printer_communication
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_printer_communication
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_UART_Init_printer_comm
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResults
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[151]"></a>PrinterParamters</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, printer.o(i.PrinterParamters))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PrinterParamters &rArr; putchar_printer &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPrintBuffer
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar_printer
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRINT_Header
</UL>

<P><STRONG><a name="[15d]"></a>ProcessAnalogCH</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, control.o(i.ProcessAnalogCH))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ProcessAnalogCH &rArr; compare_analog_value
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_analog_value
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_min_max_voltage_per_ch
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_max_current_per_ch
</UL>

<P><STRONG><a name="[15f]"></a>PuniPrintBuffer</STRONG> (Thumb, 1154 bytes, Stack size 224 bytes, control.o(i.PuniPrintBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = PuniPrintBuffer &rArr; CalculateMaxMinTimePerPhase &rArr; calc_min_time
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewLine
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_min_time
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_max_time
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimePrikaz
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayText
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateMaxMinTimePerPhase
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddSinglePhaseResult
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[163]"></a>PuniPrintBufferAnalogCH</STRONG> (Thumb, 756 bytes, Stack size 96 bytes, control.o(i.PuniPrintBufferAnalogCH))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = PuniPrintBufferAnalogCH &rArr; PrintNewLine &rArr; putchar_printer &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_gained_value
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_offset_correction
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewLine
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[166]"></a>PuniPrintBufferCurrent</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, control.o(i.PuniPrintBufferCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PuniPrintBufferCurrent &rArr; PrintNewLine &rArr; putchar_printer &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_gained_value
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_offset_correction
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewLine
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimePrikaz
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[167]"></a>PuniPrintBufferMotion</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, control.o(i.PuniPrintBufferMotion))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PuniPrintBufferMotion &rArr; LinearTransducerRes_Prikaz &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewLine
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearTransducerRes_Prikaz
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalTransRes_Prikaz
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[168]"></a>ReadAuxillaryChannels</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, adc.o(i.ReadAuxillaryChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadAuxillaryChannels &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_adcs
</UL>

<P><STRONG><a name="[169]"></a>ReadSPIs</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usb_flash_drive.o(i.ReadSPIs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadSPIs &rArr; spie_master_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spie_master_tx_rx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_select_usb_flash_drive
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_deselect_usb_flash_drive
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrvn
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNrs
</UL>

<P><STRONG><a name="[16a]"></a>Read_ADC_Res_COMM</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, control.o(i.Read_ADC_Res_COMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Read_ADC_Res_COMM &rArr; read_all_adcs &rArr; ADC_Read_MainContacts &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OK_Response
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutputBuffer
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_adcs
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_16_bit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[16c]"></a>Read_Calib_Coef_Comm</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, calib.o(i.Read_Calib_Coef_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Read_Calib_Coef_Comm &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_range
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[16e]"></a>Read_Calib_Coef_from_EEPROM_Comm</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, calib.o(i.Read_Calib_Coef_from_EEPROM_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Read_Calib_Coef_from_EEPROM_Comm &rArr; check_calibration_coeficients
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_calibration_coeficients
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[170]"></a>Read_DRM_ADC</STRONG> (Thumb, 642 bytes, Stack size 136 bytes, control.o(i.Read_DRM_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Read_DRM_ADC &rArr; DRM1_ADC_Read_All
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutputBuffer
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Write_16b
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Read_16b
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRM1_ADC_Read_All
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcharB
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[173]"></a>Read_One_ADC_CH_COMM</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, control.o(i.Read_One_ADC_CH_COMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Read_One_ADC_CH_COMM &rArr; read_all_adcs &rArr; ADC_Read_MainContacts &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_to_slong_DT_res
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_int
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_adcs
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_if_digit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_16_bit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[175]"></a>Relay_IGBT_Control</STRONG> (Thumb, 550 bytes, Stack size 16 bytes, control.o(i.Relay_IGBT_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Relay_IGBT_Control &rArr; SetAnalogCHRange &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OK_Response
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAnalogCHRange
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RelayControl
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[176]"></a>RemoteCommandSwitch</STRONG> (Thumb, 1300 bytes, Stack size 16 bytes, remote.o(i.RemoteCommandSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = RemoteCommandSwitch &rArr; Internal_SD_Mem_Comm &rArr; list_all_mem_locations &rArr; read_from_file &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBuffer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResults_Comm
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OK_Response
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryWriteByte_Comm
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryTest_Comm
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryReadByte_Comm
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Internal_SD_Mem_Comm
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStick_Comm
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Test_Settings_Comm
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RMO_Results_Comm
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Measurement_Data_Comm
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Active_Calibration_Coef_COMM
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterTimeDate_COMM
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterTFUnits_COMM
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterBreakerTestDataFileName_COMM
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DT_Reset_Counter_COMM
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBreakerStatus_COMM
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Charger_Control
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGTest_COMM
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUX_DryWetControl_Command
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutputBuffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Calibration_COMM
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_fun
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_flash_drive_MCU
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_DRM_Channel
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Calib_Coef_Comm
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toggle_Pins
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Store_Calib_Coef_to_EEPROM_Comm
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Test_Mode_COMM
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RMO_Results_Comm
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Active_Language_Comm
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRemoteControl_COMM
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPulseLenghts_COMM
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMeasParameters_COMM
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLTransdParameters_COMM
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCommPort_COMM
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeasurementParameters_Comm
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_IGBT_Control
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_One_ADC_CH_COMM
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DRM_ADC
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Calib_Coef_from_EEPROM_Comm
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Calib_Coef_Comm
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADC_Res_COMM
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferMotion
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferCurrent
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferAnalogCH
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[185]"></a>Reset_Calibration_COMM</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, calib.o(i.Reset_Calibration_COMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Reset_Calibration_COMM
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>SDIO_ConfigData</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_ConfigData))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[195]"></a>SDIO_GetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[e4]"></a>SDIO_GetResponse</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[e7]"></a>SDIO_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[e8]"></a>SDIO_PowerState_ON</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_PowerState_ON))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[ef]"></a>SDIO_ReadFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[188]"></a>SDIO_SendCommand</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_SendCommand))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[f3]"></a>SDIO_WriteFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[187]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdAppCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[18a]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdAppOperCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_CmdAppOperCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp3
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[eb]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdBlockLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdBlockLength &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[18c]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdGoIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_CmdGoIdleState
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[18d]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 98 bytes, Stack size 36 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdOperCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SDMMC_CmdOperCond
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[ed]"></a>SDMMC_CmdReadMultiBlock</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdReadMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdReadMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[ee]"></a>SDMMC_CmdReadSingleBlock</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdReadSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[18e]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSelDesel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSelDesel &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[18f]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_CmdSendCID
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[191]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDMMC_CmdSendCSD
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[e3]"></a>SDMMC_CmdSendStatus</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>

<P><STRONG><a name="[192]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSetRelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[f0]"></a>SDMMC_CmdStopTransfer</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdStopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdStopTransfer &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[f1]"></a>SDMMC_CmdWriteMultiBlock</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdWriteMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdWriteMultiBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[f2]"></a>SDMMC_CmdWriteSingleBlock</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdWriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[5f]"></a>SD_initialize</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sd_diskio.o(i.SD_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SD_initialize &rArr; BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>SD_ioctl</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, sd_diskio.o(i.SD_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>SD_read</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sd_diskio.o(i.SD_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_read &rArr; BSP_SD_ReadBlocks &rArr; HAL_SD_ReadBlocks &rArr; SDMMC_CmdStopTransfer &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>SD_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sd_diskio.o(i.SD_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_status &rArr; SD_CheckStatus &rArr; BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>SD_write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sd_diskio.o(i.SD_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_write &rArr; BSP_SD_WriteBlocks &rArr; HAL_SD_WriteBlocks &rArr; SDMMC_CmdWriteSingleBlock &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>SET_GPIOB_Structure</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.SET_GPIOB_Structure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SET_GPIOB_Structure &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_adc_channels_test
</UL>

<P><STRONG><a name="[13c]"></a>SET_GPIO_Structures</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, adc.o(i.SET_GPIO_Structures))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SET_GPIO_Structures &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1ed]"></a>S_D8</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comm.o(i.S_D8))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spie_master_tx_rx
</UL>

<P><STRONG><a name="[1ec]"></a>S_D82</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comm.o(i.S_D82))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spie_master_tx_fast
</UL>

<P><STRONG><a name="[180]"></a>SendMeasurementParameters_Comm</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, control.o(i.SendMeasurementParameters_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendMeasurementParameters_Comm &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[c6]"></a>SendOutputBuffer</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, comm.o(i.SendOutputBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SendOutputBuffer &rArr; putcharB &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putcharB
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryWriteByte_Comm
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryTest_Comm
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Active_Calibration_Coef_COMM
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_char_from_pc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test_data_to_pc
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DRM_ADC
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADC_Res_COMM
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProgressBar
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_all_mem_locations
</UL>

<P><STRONG><a name="[124]"></a>SendProgressBar</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sd_card.o(i.SendProgressBar))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SendProgressBar &rArr; SendOutputBuffer &rArr; putcharB &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutputBuffer
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestWrite
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_data_to_sd_card
</UL>

<P><STRONG><a name="[a1]"></a>SendVNC1L</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_flash_drive.o(i.SendVNC1L))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SendVNC1L &rArr; WriteSPIs &rArr; spie_master_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSPIs
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDir
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFileW
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile3
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVNC1L
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFile
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFile
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFile
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKD
</UL>

<P><STRONG><a name="[123]"></a>SendVNC1L_fast</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb_flash_drive.o(i.SendVNC1L_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SendVNC1L_fast &rArr; WriteSPIs_fast &rArr; spie_master_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSPIs_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile
</UL>

<P><STRONG><a name="[136]"></a>SetAnalogCHRange</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, bios.o(i.SetAnalogCHRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SetAnalogCHRange &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_IGBT_Control
</UL>

<P><STRONG><a name="[17c]"></a>SetCommPort_COMM</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, control.o(i.SetCommPort_COMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetCommPort_COMM &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[14e]"></a>SetDir</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, usb_flash_drive.o(i.SetDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SetDir &rArr; VNrs &rArr; ReadSPIs &rArr; spie_master_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setdt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrvn
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VNrs
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVNC1L
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenVfile
</UL>

<P><STRONG><a name="[17f]"></a>SetLTransdParameters_COMM</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, control.o(i.SetLTransdParameters_COMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SetLTransdParameters_COMM &rArr; string_to_int &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OK_Response
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_int
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_if_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[17e]"></a>SetMeasParameters_COMM</STRONG> (Thumb, 838 bytes, Stack size 120 bytes, control.o(i.SetMeasParameters_COMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SetMeasParameters_COMM &rArr; string_to_int &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OK_Response
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_int
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_if_digit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[179]"></a>SetPulseLenghts_COMM</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, control.o(i.SetPulseLenghts_COMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SetPulseLenghts_COMM &rArr; string_to_int &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_int
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_if_digit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[17b]"></a>SetRemoteControl_COMM</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, control.o(i.SetRemoteControl_COMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SetRemoteControl_COMM &rArr; putcharB &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putcharB
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[182]"></a>Set_Active_Language_Comm</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, control.o(i.Set_Active_Language_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Set_Active_Language_Comm &rArr; OK_Response &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OK_Response
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[181]"></a>Set_RMO_Results_Comm</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, control.o(i.Set_RMO_Results_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Set_RMO_Results_Comm &rArr; OK_Response &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OK_Response
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[17d]"></a>Set_Test_Mode_COMM</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, control.o(i.Set_Test_Mode_COMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Set_Test_Mode_COMM &rArr; BSG_OFF_Sequence &rArr; OSGConfigON &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OK_Response
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSG_OFF_Sequence
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGRelayControl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGConfigON
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGChargeDischargeRELControl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGBuckControl
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[184]"></a>Store_Calib_Coef_to_EEPROM_Comm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, calib.o(i.Store_Calib_Coef_to_EEPROM_Comm))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19b]"></a>SystemClock_Config</STRONG> (Thumb, 140 bytes, Stack size 88 bytes, init.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[119]"></a>TestWrite</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_flash_drive.o(i.TestWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = TestWrite &rArr; LWriteToFile &rArr; SendProgressBar &rArr; SendOutputBuffer &rArr; putcharB &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile3
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProgressBar
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStick_Comm
</UL>

<P><STRONG><a name="[162]"></a>TimePrikaz</STRONG> (Thumb, 350 bytes, Stack size 24 bytes, control.o(i.TimePrikaz))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TimePrikaz &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBuffer
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferCurrent
</UL>

<P><STRONG><a name="[17a]"></a>Toggle_Pins</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, control.o(i.Toggle_Pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Toggle_Pins &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[15a]"></a>USART1_UART_Init_printer_comm</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, init.o(i.USART1_UART_Init_printer_comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART1_UART_Init_printer_comm &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResults_Comm
</UL>

<P><STRONG><a name="[126]"></a>UcitajNumerickeRezultate</STRONG> (Thumb, 1070 bytes, Stack size 24 bytes, usb_flash_drive.o(i.UcitajNumerickeRezultate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UcitajNumerickeRezultate
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile2
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>VNrs</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, usb_flash_drive.o(i.VNrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VNrs &rArr; ReadSPIs &rArr; spie_master_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSPIs
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDir
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFileW
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile3
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVNC1L
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFile
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFile
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFile
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKD
</UL>

<P><STRONG><a name="[197]"></a>WriteSPIs</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, usb_flash_drive.o(i.WriteSPIs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteSPIs &rArr; spie_master_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spie_master_tx_rx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_select_usb_flash_drive
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_deselect_usb_flash_drive
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVNC1L
</UL>

<P><STRONG><a name="[198]"></a>WriteSPIs_fast</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usb_flash_drive.o(i.WriteSPIs_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteSPIs_fast &rArr; spie_master_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spie_master_tx_rx
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spie_master_tx_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVNC1L_fast
</UL>

<P><STRONG><a name="[183]"></a>Write_Calib_Coef_Comm</STRONG> (Thumb, 468 bytes, Stack size 32 bytes, calib.o(i.Write_Calib_Coef_Comm))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Write_Calib_Coef_Comm &rArr; string_to_int &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OK_Response
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_int
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_if_digit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_range
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[178]"></a>Write_DRM_Channel</STRONG> (Thumb, 526 bytes, Stack size 104 bytes, control.o(i.Write_DRM_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Write_DRM_Channel &rArr; DRM1_ADC_Read_All
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRM1_ADC_Read_All
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_int
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRM_DAC_Write
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRM_Channel_Enable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRM_Channel_Disable
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[19f]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[207]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[9d]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBuffer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OK_Response
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryWriteByte_Comm
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryTest_Comm
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryReadByte_Comm
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Active_Calibration_Coef_COMM
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBreakerStatus_COMM
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Charger_Control
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimePrikaz
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearTransducerRes_Prikaz
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayText
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalTransRes_Prikaz
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_char_from_pc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test_data_to_pc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRM_Channel_Enable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRM_Channel_Disable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_DRM_Channel
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toggle_Pins
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPulseLenghts_COMM
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMeasParameters_COMM
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCommPort_COMM
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMeasurementParameters_Comm
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_One_ADC_CH_COMM
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DRM_ADC
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Calib_Coef_Comm
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADC_Res_COMM
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferMotion
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferCurrent
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferAnalogCH
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDir
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFileW
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile3
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFile
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFile
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFile
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_mem_loc_info
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_path
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProgressBar
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRINT_Header
</UL>

<P><STRONG><a name="[208]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[209]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[20a]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[20b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[20c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[20d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[16b]"></a>abs_16_bit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, control.o(i.abs_16_bit))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_measuring_samples_to_pc
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_One_ADC_CH_COMM
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADC_Res_COMM
</UL>

<P><STRONG><a name="[1a5]"></a>add_new_res_to_list</STRONG> (Thumb, 66 bytes, Stack size 512 bytes, sd_card.o(i.add_new_res_to_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = add_new_res_to_list &rArr; read_from_file &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_list_array_into_mem
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_file
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd_card
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_path
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_file_and_unmount
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_data_to_sd_card
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_result_from_the_list
</UL>

<P><STRONG><a name="[165]"></a>apply_offset_correction</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, calib.o(i.apply_offset_correction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apply_offset_correction
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferCurrent
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferAnalogCH
</UL>

<P><STRONG><a name="[a6]"></a>calc_max_time</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, control.o(i.calc_max_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = calc_max_time
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBuffer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateMaxMinTimePerPhase
</UL>

<P><STRONG><a name="[a5]"></a>calc_min_time</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, control.o(i.calc_min_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = calc_min_time
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBuffer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateMaxMinTimePerPhase
</UL>

<P><STRONG><a name="[164]"></a>calculate_gained_value</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, calib.o(i.calculate_gained_value))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferCurrent
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PuniPrintBufferAnalogCH
</UL>

<P><STRONG><a name="[138]"></a>calculate_offset_for_CC_channels</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, calib.o(i.calculate_offset_for_CC_channels))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = calculate_offset_for_CC_channels
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_analog_adc_for_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
</UL>

<P><STRONG><a name="[1ac]"></a>calculate_overtavel</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, control.o(i.calculate_overtavel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = calculate_overtavel
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_to_slong_DT_res
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_opening_test
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_closing_test
</UL>

<P><STRONG><a name="[1ad]"></a>calculate_rebound</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, control.o(i.calculate_rebound))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = calculate_rebound
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_to_slong_DT_res
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_opening_test
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_closing_test
</UL>

<P><STRONG><a name="[1ae]"></a>calculate_total_travel</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, control.o(i.calculate_total_travel))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = calculate_total_travel &rArr; read_adc_res_sram_test &rArr; HAL_SRAM_Read_16b
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_to_slong_DT_res
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc_res_sram_test
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_opening_test
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_closing_test
</UL>

<P><STRONG><a name="[16f]"></a>check_calibration_coeficients</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, calib.o(i.check_calibration_coeficients))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = check_calibration_coeficients
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Calib_Coef_from_EEPROM_Comm
</UL>

<P><STRONG><a name="[156]"></a>check_for_stop_button</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, control.o(i.check_for_stop_button))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_for_stop_button
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewLine
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_opening_test
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_closing_test
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_OC_test
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_OCO_test
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_CO_test
</UL>

<P><STRONG><a name="[be]"></a>check_if_digit</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, control.o(i.check_if_digit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_if_digit
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResults_Comm
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryWriteByte_Comm
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryReadByte_Comm
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Internal_SD_Mem_Comm
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Measurement_Data_Comm
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterTimeDate_COMM
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Calib_Coef_Comm
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPulseLenghts_COMM
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMeasParameters_COMM
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLTransdParameters_COMM
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_One_ADC_CH_COMM
</UL>

<P><STRONG><a name="[1b3]"></a>check_mc_test_results</STRONG> (Thumb, 188 bytes, Stack size 128 bytes, control.o(i.check_mc_test_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = check_mc_test_results &rArr; read_adc_res_sram_test &rArr; HAL_SRAM_Read_16b
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc_res_sram_test
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_opening_test
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_closing_test
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_OC_test
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_OCO_test
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_CO_test
</UL>

<P><STRONG><a name="[122]"></a>clear_sector</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_flash_drive.o(i.clear_sector))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UcitajNumerickeRezultate
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile3
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile
</UL>

<P><STRONG><a name="[1a9]"></a>close_file_and_unmount</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sd_card.o(i.close_file_and_unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = close_file_and_unmount &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_numerics_to_sd_card
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_list_array_into_mem
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_graphics_to_sd_card
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_res_to_list
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_from_sd_card
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_location_info
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_all_mem_locations
</UL>

<P><STRONG><a name="[a0]"></a>clrvn</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usb_flash_drive.o(i.clrvn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = clrvn &rArr; ReadSPIs &rArr; spie_master_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSPIs
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDir
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenVfile
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFileW
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile3
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitVNC1L
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFile
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteFile
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFile
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKD
</UL>

<P><STRONG><a name="[13f]"></a>coil_control</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, control.o(i.coil_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = coil_control &rArr; drive_open_coil
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_open_coil
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drive_close_coil
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
</UL>

<P><STRONG><a name="[15e]"></a>compare_analog_value</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, control.o(i.compare_analog_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = compare_analog_value
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessAnalogCH
</UL>

<P><STRONG><a name="[174]"></a>convert_to_slong_DT_res</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.convert_to_slong_DT_res))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_opening_test
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_closing_test
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_total_travel
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_rebound
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_overtavel
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_One_ADC_CH_COMM
</UL>

<P><STRONG><a name="[1a6]"></a>define_path</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sd_card.o(i.define_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = define_path &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_numerics_to_sd_card
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_graphics_to_sd_card
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_res_to_list
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_from_sd_card
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_location_info
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_all_mem_locations
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_all_mem_locations
</UL>

<P><STRONG><a name="[b3]"></a>delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_flash_drive.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStick_Comm
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRM_DAC_Write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVNC1L_fast
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile
</UL>

<P><STRONG><a name="[11d]"></a>delete_result_from_the_list</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sd_card.o(i.delete_result_from_the_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = delete_result_from_the_list &rArr; add_new_res_to_list &rArr; read_from_file &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_res_to_list
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Internal_SD_Mem_Comm
</UL>

<P><STRONG><a name="[15c]"></a>disable_printer_communication</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bios.o(i.disable_printer_communication))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = disable_printer_communication &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResults_Comm
</UL>

<P><STRONG><a name="[1dc]"></a>disk_initialize</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1f1]"></a>disk_ioctl</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[1d3]"></a>disk_read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[1db]"></a>disk_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1d6]"></a>disk_write</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[13a]"></a>drive_close_coil</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, control.o(i.drive_close_coil))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drive_close_coil
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coil_control
</UL>

<P><STRONG><a name="[139]"></a>drive_open_coil</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, control.o(i.drive_open_coil))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drive_open_coil
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coil_control
</UL>

<P><STRONG><a name="[15b]"></a>enable_printer_communication</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bios.o(i.enable_printer_communication))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = enable_printer_communication &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResults_Comm
</UL>

<P><STRONG><a name="[11e]"></a>erase_all_mem_locations</STRONG> (Thumb, 48 bytes, Stack size 512 bytes, sd_card.o(i.erase_all_mem_locations))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = erase_all_mem_locations &rArr; store_list_array_into_mem &rArr; write_to_file &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_list_array_into_mem
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_path
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Internal_SD_Mem_Comm
</UL>

<P><STRONG><a name="[1b4]"></a>f_close</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_file_and_unmount
</UL>

<P><STRONG><a name="[1b5]"></a>f_mount</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd_card
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_file_and_unmount
</UL>

<P><STRONG><a name="[1ca]"></a>f_open</STRONG> (Thumb, 520 bytes, Stack size 112 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_file
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_file
</UL>

<P><STRONG><a name="[1d4]"></a>f_read</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_file
</UL>

<P><STRONG><a name="[1c4]"></a>f_sync</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[1d9]"></a>f_unlink</STRONG> (Thumb, 158 bytes, Stack size 120 bytes, ff.o(i.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_file
</UL>

<P><STRONG><a name="[1da]"></a>f_write</STRONG> (Thumb, 398 bytes, Stack size 48 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_file
</UL>

<P><STRONG><a name="[172]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DRM_ADC
</UL>

<P><STRONG><a name="[1cd]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fatfs.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[16d]"></a>get_range</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, calib.o(i.get_range))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Calib_Coef_Comm
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Calib_Coef_Comm
</UL>

<P><STRONG><a name="[1dd]"></a>get_real_adc_values</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, adc.o(i.get_real_adc_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_real_adc_values
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_file
</UL>

<P><STRONG><a name="[c3]"></a>getcharB</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, comm.o(i.getcharB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getcharB &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputBuffer
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_char_from_pc
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DRM_ADC
</UL>

<P><STRONG><a name="[1de]"></a>init_bat_control</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, init.o(i.init_bat_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = init_bat_control &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1df]"></a>init_coil_control</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, init.o(i.init_coil_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = init_coil_control &rArr; CC_RelayControl &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC_RelayControl
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e3]"></a>init_results_vaules</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, control.o(i.init_results_vaules))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_results_vaules
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_opening_test
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_closing_test
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_OC_test
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_OCO_test
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_CO_test
</UL>

<P><STRONG><a name="[1a7]"></a>init_sd_card</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sd_card.o(i.init_sd_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = init_sd_card &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_numerics_to_sd_card
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_list_array_into_mem
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_graphics_to_sd_card
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_res_to_list
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_from_sd_card
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_location_info
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_all_mem_locations
</UL>

<P><STRONG><a name="[1e0]"></a>init_variables</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, init.o(i.init_variables))
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>list_all_mem_locations</STRONG> (Thumb, 92 bytes, Stack size 528 bytes, sd_card.o(i.list_all_mem_locations))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = list_all_mem_locations &rArr; read_from_file &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutputBuffer
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_file
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_mem_loc_info
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd_card
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_path
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_file_and_unmount
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Internal_SD_Mem_Comm
</UL>

<P><STRONG><a name="[1e1]"></a>load_mem_loc_info</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sd_card.o(i.load_mem_loc_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = load_mem_loc_info &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_location_info
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_all_mem_locations
</UL>

<P><STRONG><a name="[5b]"></a>main</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = main &rArr; RemoteCommandSwitch &rArr; Internal_SD_Mem_Comm &rArr; list_all_mem_locations &rArr; read_from_file &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_variables
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_coil_control
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_bat_control
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutputBuffer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Calibration_COMM
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainContactsInitSequence
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDIO_SD_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FSMC_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputBuffer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[171]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_DRM_ADC
</UL>

<P><STRONG><a name="[120]"></a>mem_location_info</STRONG> (Thumb, 66 bytes, Stack size 512 bytes, sd_card.o(i.mem_location_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = mem_location_info &rArr; read_from_file &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_file
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_mem_loc_info
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd_card
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_path
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_file_and_unmount
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Internal_SD_Mem_Comm
</UL>

<P><STRONG><a name="[c4]"></a>my_getchar</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, comm.o(i.my_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = my_getchar &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetInputBuffer
</UL>

<P><STRONG><a name="[155]"></a>my_putchar</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, comm.o(i.my_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = my_putchar &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosaljiMSodgovor
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_file
</UL>

<P><STRONG><a name="[143]"></a>process_data_for_CO_test</STRONG> (Thumb, 268 bytes, Stack size 160 bytes, control.o(i.process_data_for_CO_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = process_data_for_CO_test &rArr; check_mc_test_results &rArr; read_adc_res_sram_test &rArr; HAL_SRAM_Read_16b
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_min_max_voltage_per_ch
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_max_current_per_ch
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_results_vaules
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mc_test_results
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_for_stop_button
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc_res_sram_test
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
</UL>

<P><STRONG><a name="[145]"></a>process_data_for_OCO_test</STRONG> (Thumb, 696 bytes, Stack size 480 bytes, control.o(i.process_data_for_OCO_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = process_data_for_OCO_test &rArr; check_mc_test_results &rArr; read_adc_res_sram_test &rArr; HAL_SRAM_Read_16b
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_min_max_voltage_per_ch
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_max_current_per_ch
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_results_vaules
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mc_test_results
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_for_stop_button
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc_res_sram_test
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
</UL>

<P><STRONG><a name="[144]"></a>process_data_for_OC_test</STRONG> (Thumb, 544 bytes, Stack size 416 bytes, control.o(i.process_data_for_OC_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = process_data_for_OC_test &rArr; check_mc_test_results &rArr; read_adc_res_sram_test &rArr; HAL_SRAM_Read_16b
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_min_max_voltage_per_ch
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_max_current_per_ch
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_results_vaules
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mc_test_results
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_for_stop_button
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc_res_sram_test
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
</UL>

<P><STRONG><a name="[141]"></a>process_data_for_closing_test</STRONG> (Thumb, 1024 bytes, Stack size 312 bytes, control.o(i.process_data_for_closing_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = process_data_for_closing_test &rArr; check_mc_test_results &rArr; read_adc_res_sram_test &rArr; HAL_SRAM_Read_16b
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_to_slong_DT_res
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contact_wipe_results_to_zero
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_min_max_voltage_per_ch
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_max_current_per_ch
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_results_vaules
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mc_test_results
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_for_stop_button
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_total_travel
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_rebound
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_overtavel
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc_res_sram_test
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
</UL>

<P><STRONG><a name="[142]"></a>process_data_for_opening_test</STRONG> (Thumb, 782 bytes, Stack size 200 bytes, control.o(i.process_data_for_opening_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = process_data_for_opening_test &rArr; check_mc_test_results &rArr; read_adc_res_sram_test &rArr; HAL_SRAM_Read_16b
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_to_slong_DT_res
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_contact_wipe_results_to_zero
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_min_max_voltage_per_ch
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_max_current_per_ch
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_results_vaules
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mc_test_results
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_for_stop_button
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_total_travel
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_rebound
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_overtavel
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc_res_sram_test
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
</UL>

<P><STRONG><a name="[cd]"></a>putcharB</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, comm.o(i.putcharB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = putcharB &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RMO_Results_Comm
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutputBuffer
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_char_from_pc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_measuring_samples_to_pc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_transfer_over_status
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRemoteControl_COMM
</UL>

<P><STRONG><a name="[152]"></a>putchar_printer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, comm.o(i.putchar_printer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = putchar_printer &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResults_Comm
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewLine
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinterParamters
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRINT_Header
</UL>

<P><STRONG><a name="[1e7]"></a>read_adc_raw_results</STRONG> (Thumb, 412 bytes, Stack size 80 bytes, adc.o(i.read_adc_raw_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = read_adc_raw_results &rArr; HAL_SRAM_Read_16b
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Read_16b
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Read_8b
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_file
</UL>

<P><STRONG><a name="[c9]"></a>read_adc_res_sram_test</STRONG> (Thumb, 640 bytes, Stack size 80 bytes, adc.o(i.read_adc_res_sram_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = read_adc_res_sram_test &rArr; HAL_SRAM_Read_16b
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Read_16b
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Read_8b
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Measurement_Data_Comm
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_opening_test
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_closing_test
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_OC_test
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_OCO_test
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_CO_test
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_mc_test_results
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_total_travel
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile
</UL>

<P><STRONG><a name="[13e]"></a>read_all_adc_channels_test</STRONG> (Thumb, 3122 bytes, Stack size 48 bytes, adc.o(i.read_all_adc_channels_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_all_adc_channels_test &rArr; SET_GPIOB_Structure &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_GPIOB_Structure
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Write_16b
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Write_8b
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
</UL>

<P><STRONG><a name="[a8]"></a>read_all_adcs</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, control.o(i.read_all_adcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = read_all_adcs &rArr; ADC_Read_MainContacts &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAuxillaryChannels
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Read_MainContacts
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_multiple_ch_adcs
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_digital_trans_chs
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBreakerStatus_COMM
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_One_ADC_CH_COMM
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADC_Res_COMM
</UL>

<P><STRONG><a name="[1ab]"></a>read_analog_adc_for_trigger</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adc.o(i.read_analog_adc_for_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_offset_for_CC_channels
</UL>

<P><STRONG><a name="[11c]"></a>read_data_from_sd_card</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, sd_card.o(i.read_data_from_sd_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = read_data_from_sd_card &rArr; read_from_file &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_file
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd_card
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_path
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_file_and_unmount
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Internal_SD_Mem_Comm
</UL>

<P><STRONG><a name="[1eb]"></a>read_digital_trans_chs</STRONG> (Thumb, 394 bytes, Stack size 56 bytes, adc.o(i.read_digital_trans_chs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = read_digital_trans_chs &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_adcs
</UL>

<P><STRONG><a name="[150]"></a>read_dummy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, printer.o(i.read_dummy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_dummy &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNewLine
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrinterParamters
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRINT_Header
</UL>

<P><STRONG><a name="[1a8]"></a>read_from_file</STRONG> (Thumb, 298 bytes, Stack size 512 bytes, sd_card.o(i.read_from_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = read_from_file &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_char_from_pc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_measuring_samples_to_pc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data_transfer_over_status
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_real_adc_values
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_res_to_list
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_from_sd_card
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_location_info
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_all_mem_locations
</UL>

<P><STRONG><a name="[1ea]"></a>read_multiple_ch_adcs</STRONG> (Thumb, 1142 bytes, Stack size 56 bytes, adc.o(i.read_multiple_ch_adcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = read_multiple_ch_adcs &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_all_adcs
</UL>

<P><STRONG><a name="[186]"></a>reset_flash_drive_MCU</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usb_flash_drive.o(i.reset_flash_drive_MCU))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = reset_flash_drive_MCU &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[1e4]"></a>search_max_current_per_ch</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, control.o(i.search_max_current_per_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = search_max_current_per_ch &rArr; ProcessAnalogCH &rArr; compare_analog_value
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessAnalogCH
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_opening_test
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_closing_test
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_OC_test
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_OCO_test
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_CO_test
</UL>

<P><STRONG><a name="[1e5]"></a>search_min_max_voltage_per_ch</STRONG> (Thumb, 70 bytes, Stack size 28 bytes, control.o(i.search_min_max_voltage_per_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = search_min_max_voltage_per_ch &rArr; ProcessAnalogCH &rArr; compare_analog_value
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessAnalogCH
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_opening_test
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_closing_test
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_OC_test
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_OCO_test
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_CO_test
</UL>

<P><STRONG><a name="[cb]"></a>send_data_transfer_over_status</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, comm.o(i.send_data_transfer_over_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = send_data_transfer_over_status &rArr; putcharB &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putcharB
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Measurement_Data_Comm
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_file
</UL>

<P><STRONG><a name="[ca]"></a>send_measuring_samples_to_pc</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, comm.o(i.send_measuring_samples_to_pc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = send_measuring_samples_to_pc &rArr; putcharB &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_16_bit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putcharB
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Measurement_Data_Comm
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_file
</UL>

<P><STRONG><a name="[cf]"></a>send_test_data_to_pc</STRONG> (Thumb, 576 bytes, Stack size 56 bytes, comm.o(i.send_test_data_to_pc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = send_test_data_to_pc &rArr; SendOutputBuffer &rArr; putcharB &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutputBuffer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Test_Settings_Comm
</UL>

<P><STRONG><a name="[1e6]"></a>set_contact_wipe_results_to_zero</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, control.o(i.set_contact_wipe_results_to_zero))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_opening_test
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_data_for_closing_test
</UL>

<P><STRONG><a name="[137]"></a>set_osg_or_bsg</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, control.o(i.set_osg_or_bsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = set_osg_or_bsg &rArr; BSGSTwoBPPF_ON_Sequence &rArr; BSGRelayControl &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSGConfigON
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGSTwoBPPF_ON_Sequence
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGSOneBPPF_ON_Sequence
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSGChargeDischargeRELControl
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasurementStart_Comm
</UL>

<P><STRONG><a name="[14d]"></a>setdt</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, usb_flash_drive.o(i.setdt))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDir
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFileW
</UL>

<P><STRONG><a name="[118]"></a>slave_deselect_usb_flash_drive</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usb_flash_drive.o(i.slave_deselect_usb_flash_drive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = slave_deselect_usb_flash_drive &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStick_Comm
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSPIs
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSPIs
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile3
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LWriteToFile
</UL>

<P><STRONG><a name="[116]"></a>slave_select_usb_flash_drive</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usb_flash_drive.o(i.slave_select_usb_flash_drive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = slave_select_usb_flash_drive &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStick_Comm
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSPIs
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSPIs
</UL>

<P><STRONG><a name="[19e]"></a>spie_master_tx_fast</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, comm.o(i.spie_master_tx_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spie_master_tx_fast
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_D82
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSPIs_fast
</UL>

<P><STRONG><a name="[117]"></a>spie_master_tx_rx</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, comm.o(i.spie_master_tx_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spie_master_tx_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_D8
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitStick_Comm
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSPIs_fast
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSPIs
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSPIs
</UL>

<P><STRONG><a name="[11b]"></a>store_data_to_sd_card</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sd_card.o(i.store_data_to_sd_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = store_data_to_sd_card &rArr; add_new_res_to_list &rArr; read_from_file &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_numerics_to_sd_card
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_graphics_to_sd_card
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_res_to_list
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendProgressBar
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Internal_SD_Mem_Comm
</UL>

<P><STRONG><a name="[1ef]"></a>store_graphics_to_sd_card</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sd_card.o(i.store_graphics_to_sd_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = store_graphics_to_sd_card &rArr; write_to_file &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_file
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd_card
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_path
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_file_and_unmount
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_data_to_sd_card
</UL>

<P><STRONG><a name="[1aa]"></a>store_list_array_into_mem</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sd_card.o(i.store_list_array_into_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = store_list_array_into_mem &rArr; write_to_file &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_file
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd_card
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_file_and_unmount
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_res_to_list
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_all_mem_locations
</UL>

<P><STRONG><a name="[1ee]"></a>store_numerics_to_sd_card</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sd_card.o(i.store_numerics_to_sd_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = store_numerics_to_sd_card &rArr; write_to_file &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_to_file
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd_card
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;define_path
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_file_and_unmount
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_data_to_sd_card
</UL>

<P><STRONG><a name="[bf]"></a>string_to_int</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, control.o(i.string_to_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = string_to_int &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResults_Comm
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryWriteByte_Comm
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Internal_SD_Mem_Comm
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Measurement_Data_Comm
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterTimeDate_COMM
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_DRM_Channel
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Calib_Coef_Comm
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPulseLenghts_COMM
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMeasParameters_COMM
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLTransdParameters_COMM
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_One_ADC_CH_COMM
</UL>

<P><STRONG><a name="[147]"></a>string_to_long</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, control.o(i.string_to_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = string_to_long &rArr; atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryWriteByte_Comm
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryReadByte_Comm
</UL>

<P><STRONG><a name="[177]"></a>test_fun</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, control.o(i.test_fun))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteCommandSwitch
</UL>

<P><STRONG><a name="[c8]"></a>wait_char_from_pc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, comm.o(i.wait_char_from_pc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wait_char_from_pc &rArr; SendOutputBuffer &rArr; putcharB &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendOutputBuffer
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putcharB
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcharB
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Measurement_Data_Comm
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_file
</UL>

<P><STRONG><a name="[1f0]"></a>write_to_file</STRONG> (Thumb, 454 bytes, Stack size 32 bytes, sd_card.o(i.write_to_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = write_to_file &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_putchar
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_adc_raw_results
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_numerics_to_sd_card
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_list_array_into_mem
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_graphics_to_sd_card
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[194]"></a>SD_CheckStatus</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_CheckStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_CheckStatus &rArr; BSP_SD_GetCardState &rArr; HAL_SD_GetCardState &rArr; SDMMC_CmdSendStatus &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[d1]"></a>HAL_FSMC_MspInit</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, stm32f4xx_hal_msp.o(i.HAL_FSMC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_FSMC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
</UL>

<P><STRONG><a name="[111]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[d6]"></a>I2C_MasterRequestWrite</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_MasterRequestWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[d8]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[d5]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
</UL>

<P><STRONG><a name="[110]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
</UL>

<P><STRONG><a name="[d7]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[189]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[190]"></a>SDMMC_GetCmdResp2</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp2))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
</UL>

<P><STRONG><a name="[18b]"></a>SDMMC_GetCmdResp3</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp3))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
</UL>

<P><STRONG><a name="[193]"></a>SDMMC_GetCmdResp6</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp6))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
</UL>

<P><STRONG><a name="[ea]"></a>SD_InitCard</STRONG> (Thumb, 230 bytes, Stack size 72 bytes, stm32f4xx_hal_sd.o(i.SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SD_InitCard &rArr; SDMMC_CmdSetRelAdd &rArr; SDMMC_GetCmdResp6 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[e9]"></a>SD_PowerON</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_sd.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_PowerON &rArr; SDMMC_CmdAppCommand &rArr; SDMMC_GetCmdResp1 &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[fe]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[101]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[ff]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[100]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[10c]"></a>UART_SetConfig</STRONG> (Thumb, 676 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[10e]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[df]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[1af]"></a>check_fs</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1cc]"></a>chk_lock</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, ff.o(i.chk_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1c8]"></a>clear_lock</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, ff.o(i.clear_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1d5]"></a>clmt_clust</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff.o(i.clmt_clust))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[1bf]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1b6]"></a>create_chain</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1b9]"></a>create_name</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = create_name
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1c6]"></a>dec_lock</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ff.o(i.dec_lock))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[1bb]"></a>dir_find</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1bd]"></a>dir_next</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[1c0]"></a>dir_read</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[1c1]"></a>dir_register</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dir_register &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1c3]"></a>dir_remove</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ff.o(i.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dir_remove &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[1bc]"></a>dir_sdi</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[1c9]"></a>find_volume</STRONG> (Thumb, 582 bytes, Stack size 40 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[1cb]"></a>follow_path</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1b7]"></a>get_fat</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[1c7]"></a>get_ldnumber</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1d2]"></a>inc_lock</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, ff.o(i.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1cf]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[1b2]"></a>ld_dword</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1b1]"></a>ld_word</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1c2]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[1ba]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1b0]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[1b8]"></a>put_fat</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[1d1]"></a>remove_chain</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[1d0]"></a>st_clust</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1ce]"></a>st_dword</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[1d7]"></a>st_word</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[1d8]"></a>sync_fs</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1be]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[1c5]"></a>validate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[1a1]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a0]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[1a3]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a2]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
